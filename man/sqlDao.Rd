% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sqlDao.R
\name{sqlDao}
\alias{sqlDao}
\title{A Data Access Object (DAO) that uses the DBI interface to access the data.}
\usage{
sqlDao(con, table, typecast = list(), meta = list())
}
\arguments{
\item{con}{A DBI connection}

\item{table}{A character string of the name of the table to be accessed}

\item{typecast}{A named list of \code{\link{typecast}} objects. If non-empty, the elements of
this list must correspond to the attributes of the SQL data table. A conversion between
internal and output data types is then performed on data insert, update or retrieval.}
}
\value{
A DAO object, i.e. a list of functions for CRUD operations on the DBI table as neeeded by
  the \code{\link{crudTableServer}} module
}
\description{
DAO is a list that provides basic backend CRUD functionality to the \code{\link{crudTableServer}}. This
DAO uses DBI to store the data. The DBI table accessed with this DAO object must not contain the
\code{'id'} attribute, as it is internally created from the DBI's \code{'rowid'} attribute.
}
\details{
See \code{\link{dataFrameDao}} for more details on Data Access Objects.

Since the DBI interface typically converts various complex R data types (such as \code{Date})
into atomic types such as number, character string and so on, \code{sqlDao} may optionally
convert the data for you into a more convenient format -- see the \code{typecast} argument.
}
\examples{
library(DBI)
library(RSQLite)

# Create an in-memory database
con <- dbConnect(RSQLite::SQLite(), ":memory:")

# Create an empty data table
data <- data.frame(date = character(0), value = numeric(0))
dbWriteTable(con, 'mytable', data)

# Create Data Access Object - the date attribute will be internally stored as character
# but transparently returned as 'Date' by the DAO
dao <- sqlDao(con,
              table = 'mytable',
              typecast = list(date = typecastDateToCharacter()))

# Insert data record
dao$insert(list(date = Sys.Date(), value = 100))

# Print data table
print(dao$getData())

# Disconnect from the database
dbDisconnect(con)
}
\seealso{
\code{\link{dataFrameDao}}, \code{\link{is.dao}}, \code{\link{typecast}}
}
