% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/crudTableServer.R
\name{crudTableServer}
\alias{crudTableServer}
\title{Server-part of the CRUD table module}
\usage{
crudTableServer(
  id,
  dao,
  formUI = formUIFactory(dao),
  formServer = formServerFactory(dao)
)
}
\arguments{
\item{id}{The ID of the module}

\item{dao}{Data Access Object (\code{\link{dao}}) that provides the data storage operations, see
e.g. \code{\link{sqlDao}} or \code{\link{dataFrameDao}}.}

\item{formUI}{A function that creates the edit form for the user's data input. Typically, it
is a function based on \code{\link{formUI}}. See examples below.}

\item{formServer}{A server-side function dual to the \code{formUI} argument that handles the
actions performed in the edit form. Typically, it is a function created with the
\code{\link{formServerFactory}}. See examples below.}
}
\value{
Returns a reactive object that triggers on any data change within the CRUD table.
}
\description{
This is the server-part of the module. It handles all the CRUD (Create, Read, Update, Delete)
operations on data. For new or existing data input, a modal dialog is opened that is defined by
the \code{formUI} and \code{formServer} arguments. The underlying data table is accessed via the
\code{\link{dao}} object.
}
\examples{
\dontrun{
library(shiny)
library(crudtable)

# Create Data Access Object
dao <- dataFrameDao(CO2)

# Create edit form dialog
myFormUI <- function(id) {
    ns <- NS(id)
    formUI(id,
            selectInput(ns('Plant'), 'Plant', choices = levels(CO2$Plant)),
            selectInput(ns('Type'), 'Type', choices = levels(CO2$Type)),
            selectInput(ns('Treatment'), 'Treatment', choices = levels(CO2$Treatment)),
            numericInput(ns('conc'), 'Ambient CO2 concentration [ml/L]',
                         value = 100, min = 50, max = 1000),
            numericInput(ns('uptake'), 'CO2 uptake rates [umol/m2 sec]',
                         value = 0, min = 0, max = 100),
    )
}

# Create edit form dialog handler
myFormServer <- formServerFactory(dao)

# User Interface
ui <- fluidPage(
    crudTableUI('crud')
)

# Server-side
server <- function(input, output, session) {
    crudTableServer('crud', dao, myFormUI, myFormServer)
}

# Run the shiny app
shinyApp(ui = ui, server = server)
}
}
\seealso{
\code{\link{crudTableUI}}
}
